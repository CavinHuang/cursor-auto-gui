name: 构建应用程序

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      PYTHONIOENCODING: utf-8
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: 更新本地版本文件
        shell: pwsh
        run: |
          $version = if ("${{ github.ref }}" -like "refs/tags/v*") { "${{ github.ref_name }}" } else { (Get-Content version)[1] }
          Write-Output "当前版本号: $version"
          $versionContent = Get-Content version
          $versionContent[1] = "$version"
          $versionContent | Set-Content version -Encoding UTF8
          Get-Content version

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller pillow

      - name: 运行构建脚本
        shell: cmd
        run: |
          chcp 65001
          python scripts/build.py
      - name: Create ZIP package
        run: |
          powershell Compress-Archive -Path dist\CursorPro.exe -DestinationPath dist\CursorPro-Windows-${{ github.ref_name }}.zip

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: CursorPro-Windows-${{ github.ref_name }}.zip
          path: dist/CursorPro-Windows-${{ github.ref_name }}.zip
          if-no-files-found: error

  build-macos:
    runs-on: macos-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: 更新本地版本文件
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION=$(grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' version | tail -1)
          fi
          echo "当前版本号: $VERSION"
          sed -i "" "2s/.*/$VERSION/" version
          cat version

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller pillow

      - name: 运行构建脚本
        run: |
          python scripts/build.py

      - name: Create ZIP package
        run: |
          ditto -c -k --keepParent dist/CursorPro.app dist/CursorPro-MacOS-${{ github.ref_name }}.zip

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: CursorPro-MacOS-${{ github.ref_name }}.zip
          path: dist/CursorPro-MacOS-${{ github.ref_name }}.zip
          if-no-files-found: error

  create-release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: 准备发布文件
        run: |
          find artifacts -type f -name "*.zip" | sort
          mkdir -p release-files
          cp artifacts/CursorPro-Windows-${{ github.ref_name }}.zip/CursorPro-Windows-${{ github.ref_name }}.zip release-files/ || echo "Windows文件不存在"
          cp artifacts/CursorPro-MacOS-${{ github.ref_name }}.zip/CursorPro-MacOS-${{ github.ref_name }}.zip release-files/ || echo "MacOS文件不存在"

      - name: 创建发布
        uses: softprops/action-gh-release@v1
        with:
          files: release-files/*.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-version:
    needs: create-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 更新version文件到当前发布版本
        run: |
          # 更新version文件为当前发布版本
          sed -i "2s/.*/${{ github.ref_name }}/" version
          echo "更新version文件为当前发布版本: ${{ github.ref_name }}"
          cat version

      - name: 提交version文件更新
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add version
          git commit -m "更新version文件到发布版本 ${{ github.ref_name }}" || echo "没有变化需要提交"
          git push "https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" HEAD:${GITHUB_REF#refs/heads/}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
